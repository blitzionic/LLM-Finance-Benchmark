import os
import json
from base_agent import Agent
from answer_schema import AnswerSchema

# Intitial Generator -> Reviewer -> Challenger Agent 
# The Reviewer Agent is intended to “review” the initial generated solution. 
# It reviews the solution returns its own answer. 

FUNCTION_SCHEMA = {
    "name": "generate_answer",
    "description": "Generate a candidate answer along with a brief explanation. The candidate answer must be one letter among A, B, C, or D.",
    "parameters": {
        "type": "object",
        "properties": {
            "answer": {
                "type": "string",
                "enum": ["A", "B", "C", "D"],
                "description": "The candidate answer, which must be one letter: A, B, C, or D."
            },
            "reasoning": {
                "type": "string",
                "description": "A brief explanation of the reasoning behind the chosen answer."
            }
        },
        "required": ["answer", "reasoning"]
    }
}

class ReviewerAgent(Agent):
    def __init__(self, topic, model="gpt-4o", topic_roles_json="config/topic_roles.json"):
        if os.path.exists(topic_roles_json):
          with open(topic_roles_json, 'r', encoding='utf-8') as f:
            roles = json.load(f) 
    
        # set agent's role description
        print(f"TOPIC: {topic.lower()}")
        self.role_description = roles.get(topic.lower(), "")
        print(f"ROLE DESCRIPTION: {self.role_description}")
        super().__init__(model=model, pyd_model=AnswerSchema)
        self.function_schema = FUNCTION_SCHEMA
    
    # task the agent as a reviewer
    def system_prompt(self):
        return (
            f"{self.role_description}\n"
            "You are a highly experienced financial expert. Your job is to review an answer generated by an initial solution generator for a multiple-choice finance question. "
            "Consider the original question, the provided initial answer, and your own expertise in finance to critically assess the answer’s strengths and weaknesses. "
            "Identify any gaps in reasoning or potential errors, and then determine what you believe is the correct answer. "
            "Finally, respond by selecting one letter (A, B, C, or D) as your recommended answer and provide a clear, concise explanation for your decision. "
            "Your response must be formatted as a JSON object with two keys: 'answer' and 'feedback'."
        )
    
    def process(self, question, previous_model_answer):
        prompt = (
            f"Original Question: {question}\n"
            f"Initial Answer: {previous_model_answer}\n\n"
            "As an expert, please review the initial answer thoroughly. "
            "Assess its strengths and weaknesses, and then determine the most accurate answer for the multiple-choice finance question. "
            "Select one letter (A, B, C, or D) as your final answer and provide your expert reasoning for that choice."
        )
        return self.generate_response(prompt)
